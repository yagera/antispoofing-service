import streamlit as st
import tempfile
import os
from pathlib import Path
import plotly.graph_objects as go
import plotly.express as px
from inference import AntiSpoofingModel
import pandas as pd

st.set_page_config(
    page_title="Audio Anti-Spoofing Service",
    layout="wide"
)

st.title("Audio Anti-Spoofing Detection Service")
st.markdown("""
–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ–ª–æ—Å –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ **–Ω–∞—Å—Ç–æ—è—â–∏–º** –∏–ª–∏ **—Ñ–µ–π–∫–æ–≤—ã–º**.
- **–ö–ª–∞—Å—Å 0**: FAKE
- **–ö–ª–∞—Å—Å 1**: REAL
""")

@st.cache_resource
def load_model():
    model_path = "weights/torch_script_weigths.pt"
    if not Path(model_path).exists():
        st.error(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {model_path}")
        st.stop()
    return AntiSpoofingModel(model_path)


try:
    model = load_model()
    st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    st.exception(e)
    st.stop()

st.markdown("---")

uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª",
    type=['wav', 'mp3', 'flac', 'ogg', 'm4a'],
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: WAV, MP3, FLAC, OGG, M4A"
)

if uploaded_file is not None:
    st.subheader("üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
    col1, col2 = st.columns(2)
    with col1:
        st.write(f"**–ò–º—è —Ñ–∞–π–ª–∞:** {uploaded_file.name}")
    with col2:
        st.write(f"**–†–∞–∑–º–µ—Ä:** {uploaded_file.size / 1024:.2f} KB")

    st.audio(uploaded_file, format=f'audio/{uploaded_file.name.split(".")[-1]}')

    if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", type="primary"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ..."):
            with tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_path = tmp_file.name

            try:
                results = model.predict(tmp_path)
                st.markdown("---")
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                st.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: **{len(results)}**")

                for idx, result in enumerate(results):
                    with st.expander(f"–ö–∞–Ω–∞–ª {result['channel']} - {result['prediction']}", expanded=True):
                        col1, col2, col3 = st.columns(3)

                        with col1:
                            prediction_color = "üü¢" if result['prediction'] == 'REAL' else "üî¥"
                            st.metric(
                                label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
                                value=f"{prediction_color} {result['prediction']}"
                            )

                        with col2:
                            st.metric(
                                label="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                                value=f"{result['confidence'] * 100:.2f}%"
                            )

                        with col3:
                            threshold_status = "‚úÖ" if result['real_prob'] > 0.5 else "‚ö†Ô∏è"
                            st.metric(
                                label="–°—Ç–∞—Ç—É—Å",
                                value=f"{threshold_status}"
                            )

                        st.markdown("#### –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤")
                        prob_col1, prob_col2 = st.columns(2)

                        with prob_col1:
                            st.metric(
                                label="üî¥ FAKE (–∫–ª–∞—Å—Å 0)",
                                value=f"{result['fake_prob'] * 100:.2f}%",
                                delta=None
                            )

                        with prob_col2:
                            st.metric(
                                label="üü¢ REAL (–∫–ª–∞—Å—Å 1)",
                                value=f"{result['real_prob'] * 100:.2f}%",
                                delta=None
                            )

                        fig = go.Figure(data=[
                            go.Bar(
                                x=['FAKE', 'REAL'],
                                y=[result['fake_prob'], result['real_prob']],
                                marker_color=['#ff4b4b', '#00cc00'],
                                text=[f"{result['fake_prob'] * 100:.2f}%", f"{result['real_prob'] * 100:.2f}%"],
                                textposition='auto',
                            )
                        ])

                        fig.update_layout(
                            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π - –ö–∞–Ω–∞–ª {result['channel']}",
                            yaxis_title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
                            xaxis_title="–ö–ª–∞—Å—Å",
                            yaxis=dict(range=[0, 1]),
                            height=400
                        )

                        st.plotly_chart(fig, use_container_width=True)

                        with st.expander("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                            st.json({
                                'channel': result['channel'],
                                'prediction': result['prediction'],
                                'confidence': result['confidence'],
                                'probabilities': {
                                    'fake': result['fake_prob'],
                                    'real': result['real_prob']
                                },
                                'logits': result['logits']
                            })

                if len(results) > 1:
                    st.markdown("---")
                    st.subheader("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º")

                    df = pd.DataFrame([
                        {
                            '–ö–∞–Ω–∞–ª': r['channel'],
                            '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ': r['prediction'],
                            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{r['confidence'] * 100:.2f}%",
                            'FAKE –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': f"{r['fake_prob'] * 100:.2f}%",
                            'REAL –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': f"{r['real_prob'] * 100:.2f}%"
                        }
                        for r in results
                    ])

                    st.dataframe(df, use_container_width=True)
                    fig_summary = go.Figure()

                    fig_summary.add_trace(go.Bar(
                        name='FAKE',
                        x=[f"–ö–∞–Ω–∞–ª {r['channel']}" for r in results],
                        y=[r['fake_prob'] for r in results],
                        marker_color='#ff4b4b'
                    ))

                    fig_summary.add_trace(go.Bar(
                        name='REAL',
                        x=[f"–ö–∞–Ω–∞–ª {r['channel']}" for r in results],
                        y=[r['real_prob'] for r in results],
                        marker_color='#00cc00'
                    ))

                    fig_summary.update_layout(
                        title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º',
                        yaxis_title='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
                        barmode='group',
                        height=500
                    )

                    st.plotly_chart(fig_summary, use_container_width=True)

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
                st.exception(e)

            finally:
                if os.path.exists(tmp_path):
                    os.unlink(tmp_path)

st.markdown("---")
st.markdown("""
<div style='text-align: center; color: gray;'>
    <p>Audio Anti-Spoofing Detection Service</p>
</div>
""", unsafe_allow_html=True)
