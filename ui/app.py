import streamlit as st
import streamlit_authenticator as stauth
import yaml
from yaml.loader import SafeLoader
import requests
from pathlib import Path
import plotly.graph_objects as go
import pandas as pd

st.set_page_config(
    page_title="Audio Anti-Spoofing Service",
    page_icon="üé§",
    layout="wide"
)

API_URL = "http://api:8000"


@st.cache_resource
def load_auth_config():
    config_path = "config.yaml"
    if not Path(config_path).exists():
        st.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        st.stop()

    with open(config_path) as file:
        config = yaml.load(file, Loader=SafeLoader)
    return config


config = load_auth_config()

authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
    auto_hash=True
)

try:
    authenticator.login()
except Exception as e:
    st.error(e)

if st.session_state.get('authentication_status') is False:
    st.error('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

elif st.session_state.get('authentication_status') is None:
    st.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å')

elif st.session_state.get('authentication_status'):
    col1, col2, col3 = st.columns([10, 1, 1])
    with col3:
        authenticator.logout('–í—ã—Ö–æ–¥', 'main')

    st.markdown("---")

    st.title("üé§ Audio Anti-Spoofing Detection Service")

    try:
        health_response = requests.get(f"{API_URL}/health", timeout=2)
        if health_response.status_code == 200:
            st.success("‚úÖ API —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω!")
        else:
            st.warning("‚ö†Ô∏è API —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        st.stop()

    st.markdown("""
    –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ–ª–æ—Å –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ **–Ω–∞—Å—Ç–æ—è—â–∏–º** –∏–ª–∏ **—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º (—Ñ–µ–π–∫–æ–≤—ã–º)**.

    - **–ö–ª–∞—Å—Å 0 (FAKE)**: –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è/–ø–æ–¥–¥–µ–ª—å–Ω–∞—è —Ä–µ—á—å
    - **–ö–ª–∞—Å—Å 1 (REAL)**: –ù–∞—Å—Ç–æ—è—â–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ä–µ—á—å
        """)

    st.markdown("---")

    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª",
        type=['wav', 'mp3', 'flac', 'ogg', 'm4a'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: WAV, MP3, FLAC, OGG, M4A"
    )

    if uploaded_file is not None:
        st.subheader("üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**–ò–º—è —Ñ–∞–π–ª–∞:** {uploaded_file.name}")
        with col2:
            st.write(f"**–†–∞–∑–º–µ—Ä:** {uploaded_file.size / 1024:.2f} KB")

        st.audio(uploaded_file, format=f'audio/{uploaded_file.name.split(".")[-1]}')

        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ", type="primary"):
            with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑..."):
                try:
                    files = {"file": (uploaded_file.name, uploaded_file.getvalue())}
                    response = requests.post(f"{API_URL}/predict", files=files, timeout=60)

                    if response.status_code == 200:
                        data = response.json()
                        results = data["results"]

                        st.markdown("---")
                        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                        st.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: **{len(results)}**")

                        for idx, result in enumerate(results):
                            with st.expander(f"–ö–∞–Ω–∞–ª {result['channel']} - {result['prediction']}", expanded=True):
                                col1, col2, col3 = st.columns(3)

                                with col1:
                                    prediction_color = "üü¢" if result['prediction'] == 'REAL' else "üî¥"
                                    st.metric(
                                        label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
                                        value=f"{prediction_color} {result['prediction']}"
                                    )

                                with col2:
                                    st.metric(
                                        label="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                                        value=f"{result['confidence'] * 100:.2f}%"
                                    )

                                with col3:
                                    threshold_status = "‚úÖ" if result['real_prob'] > 0.5 else "‚ö†Ô∏è"
                                    st.metric(
                                        label="–°—Ç–∞—Ç—É—Å",
                                        value=f"{threshold_status}"
                                    )

                                st.markdown("#### –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤")
                                prob_col1, prob_col2 = st.columns(2)

                                with prob_col1:
                                    st.metric(
                                        label="üî¥ FAKE (–∫–ª–∞—Å—Å 0)",
                                        value=f"{result['fake_prob'] * 100:.2f}%"
                                    )

                                with prob_col2:
                                    st.metric(
                                        label="üü¢ REAL (–∫–ª–∞—Å—Å 1)",
                                        value=f"{result['real_prob'] * 100:.2f}%"
                                    )

                                fig = go.Figure(data=[
                                    go.Bar(
                                        x=['FAKE', 'REAL'],
                                        y=[result['fake_prob'], result['real_prob']],
                                        marker_color=['#ff4b4b', '#00cc00'],
                                        text=[f"{result['fake_prob'] * 100:.2f}%", f"{result['real_prob'] * 100:.2f}%"],
                                        textposition='auto',
                                    )
                                ])

                                fig.update_layout(
                                    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π - –ö–∞–Ω–∞–ª {result['channel']}",
                                    yaxis_title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
                                    xaxis_title="–ö–ª–∞—Å—Å",
                                    yaxis=dict(range=[0, 1]),
                                    height=400
                                )

                                st.plotly_chart(fig, use_container_width=True)

                                with st.expander("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                                    st.json({
                                        'channel': result['channel'],
                                        'prediction': result['prediction'],
                                        'confidence': result['confidence'],
                                        'probabilities': {
                                            'fake': result['fake_prob'],
                                            'real': result['real_prob']
                                        },
                                        'logits': result['logits']
                                    })

                        if len(results) > 1:
                            st.markdown("---")
                            st.subheader("üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º")

                            df = pd.DataFrame([
                                {
                                    '–ö–∞–Ω–∞–ª': r['channel'],
                                    '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ': r['prediction'],
                                    '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': f"{r['confidence'] * 100:.2f}%",
                                    'FAKE –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': f"{r['fake_prob'] * 100:.2f}%",
                                    'REAL –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': f"{r['real_prob'] * 100:.2f}%"
                                }
                                for r in results
                            ])

                            st.dataframe(df, use_container_width=True)

                            fig_summary = go.Figure()

                            fig_summary.add_trace(go.Bar(
                                name='FAKE',
                                x=[f"–ö–∞–Ω–∞–ª {r['channel']}" for r in results],
                                y=[r['fake_prob'] for r in results],
                                marker_color='#ff4b4b'
                            ))

                            fig_summary.add_trace(go.Bar(
                                name='REAL',
                                x=[f"–ö–∞–Ω–∞–ª {r['channel']}" for r in results],
                                y=[r['real_prob'] for r in results],
                                marker_color='#00cc00'
                            ))

                            fig_summary.update_layout(
                                title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º',
                                yaxis_title='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
                                barmode='group',
                                height=500
                            )

                            st.plotly_chart(fig_summary, use_container_width=True)

                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")

                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

    st.markdown("---")